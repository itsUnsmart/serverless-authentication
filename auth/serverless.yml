service: auth

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: staging

  memorySize: 512

  environment:
      TABLE_NAME: ServerlessAuthTable-${self:custom.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Query
      Resource:
        - "Fn::GetAtt": [ServerlessAuthTable, Arn]
  httpApi:
    cors:
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - GET
        - POST
      allowCredentials: true

functions:
  OAuthClients:
    name: OAuth-List-Clients-${self:custom.stage}
    handler:
      - ${self:custom.prefix.${self:custom.stage}}/oauth/clients/index.handler
    package:
      include:
        - ${self:custom.prefix.${self:custom.stage}}/oauth/clients/index.ts
    events:
      - httpApi:
          method: GET
          path: /oauth/clients
  OAuthLogin:
    name: OAuth-Client-Login-${self:custom.stage}
    handler:
      - ${self:custom.prefix.${self:custom.stage}}/oauth/login/index.handler
    package:
      include:
        - ${self:custom.prefix.${self:custom.stage}}/oauth/login/index.ts
    events:
      - httpApi:
          method: POST
          path: /oauth/login/{client}
  OAuthLoginLink:
    name: OAuth-Client-Login-Link-${self:custom.stage}
    handler:
      - ${self:custom.prefix.${self:custom.stage}}/oauth/login/link.handler
    package:
      include:
        - ${self:custom.prefix.${self:custom.stage}}/oauth/login/link.ts
    events:
      - httpApi:
          method: POST
          path: /oauth/login/{client}/link
  OAuthLoginRedirect:
    name: OAuth-Login-Redirect-${self:custom.stage}
    handler:
      - ${self:custom.prefix.${self:custom.stage}}/oauth/login/redirect.handler
    package:
      include:
        - ${self:custom.prefix.${self:custom.stage}}/oauth/login/redirect.ts
    events:
      - httpApi:
          method: GET
          path: /oauth/login/{client}/redirect

resources:
  Resources:
    ServerlessAuthTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: 'ALL'
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  # - serverless-domain-manager
  # - serverless-prune-plugin

package:
  individually: true
  exclude:
    - ./**

custom:
  stage: ${opt:stage, self:provider.stage}
  dynamodb:
    stages:
      - staging
    start:
      port: 8000
      inMemory: true
      migrate: true
  prefix:
    prod: 'build'
    staging: 'dev-build'
  # domains:
  #   prod: 'auth.gchserverless.com'
  #   staging: 'staging-auth.gchserverless.com'
  # customDomain:
  #   domainName: ${self:custom.domains.${self:custom.stage}}
  #   basePath: 'users'
  #   stage: ${self:custom.stage}
  #   createRoute53Record: true
  # prune:
  #   automatic: true
  #   number: 2
